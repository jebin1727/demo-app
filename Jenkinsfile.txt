pipeline {
    agent any

    tools {
        maven '3.9.9'
    }

    environment {
        DOCKER_IMAGE = "jebin27/demo-app"
        DOCKER_PORT  = "8088"
    }

    stages {
        stage('Verify Tools') {
            steps {
                echo "Verifying Java, Maven, Git, and Docker versions"
                sh '''
                    set -e
                    echo "===== Java Version ====="
                    java -version

                    echo "===== Maven Version ====="
                    mvn -v

                    echo "===== Git Version ====="
                    git --version

                    echo "===== Docker Version ====="
                    docker --version
                '''
            }
        }

        stage('Compile and Clean') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Package') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        stage('Docker Cleanup') {
            steps {
                echo "Cleaning up old Docker containers and images"
                sh '''
                    # Stop any container running on ${DOCKER_PORT}
                    OLD_CONTAINER=$(docker ps -q --filter "publish=${DOCKER_PORT}")
                    if [ ! -z "$OLD_CONTAINER" ]; then
                        echo "Stopping old container: $OLD_CONTAINER"
                        docker stop $OLD_CONTAINER
                        docker rm $OLD_CONTAINER
                    fi

                    # Remove old image with same repo name
                    OLD_IMAGE=$(docker images -q ${DOCKER_IMAGE})
                    if [ ! -z "$OLD_IMAGE" ]; then
                        echo "Removing old image: $OLD_IMAGE"
                        docker rmi -f $OLD_IMAGE || true
                    fi
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image"
                sh 'docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .'
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DockerId', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PWD')]) {
                    sh 'echo $DOCKER_PWD | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Docker Push') {
            steps {
                sh 'docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}'
            }
        }

        stage('Docker Deploy') {
            steps {
                sh '''
                    echo "Starting new container for build ${BUILD_NUMBER}"
                    docker run -d --name demo-app-${BUILD_NUMBER} -p ${DOCKER_PORT}:${DOCKER_PORT} ${DOCKER_IMAGE}:${BUILD_NUMBER}
                '''
            }
        }

        stage('Prune Old Builds') {
            steps {
                echo "Cleaning up old containers and images (keeping last 2)"
                sh '''
                    # Keep only the last 2 containers
                    CONTAINERS=$(docker ps -a --filter "name=demo-app-" --format "{{.Names}}" | sort -r)
                    COUNT=0
                    for c in $CONTAINERS; do
                        COUNT=$((COUNT+1))
                        if [ $COUNT -gt 2 ]; then
                            echo "Removing old container: $c"
                            docker stop $c || true
                            docker rm $c || true
                        fi
                    done

                    # Keep only the last 2 images
                    IMAGES=$(docker images ${DOCKER_IMAGE} --format "{{.Repository}}:{{.Tag}}" | sort -r)
                    COUNT=0
                    for i in $IMAGES; do
                        COUNT=$((COUNT+1))
                        if [ $COUNT -gt 2 ]; then
                            echo "Removing old image: $i"
                            docker rmi -f $i || true
                        fi
                    done
                '''
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }
    }
}

